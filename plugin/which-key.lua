local g = vim.g
local wk = require("which-key")
wk.setup {
	ignore_missing = true,
}

wk.register({
	P = { name = "Panes",
		h = { "<cmd>wincmd h<CR>", "Switch Pane Left" },
		j = { "<cmd>wincmd j<CR>", "Switch Pane Down" },
		k = { "<cmd>wincmd k<CR>", "Switch Pane Up" },
		l = { "<cmd>wincmd l<CR>", "Switch Pane Right" },
		H = { "<cmd>vert resize -5<CR>", "Decrease Pane Width" },
		J = { "<cmd>resize -5<CR>", "Decrease Pane Height" },
		K = { "<cmd>resize +5<CR>", "Increase Pane Height" },
		L = { "<cmd>vert resize +5<CR>", "Increase Pane Width" },
		r = { "<cmd>wincmd =<CR>", "Reload Window Pages" },
		n = { "<cmd>split<CR>", "Horizontal Split" },
		m = { "<cmd>vsplit<CR>", "Vertical Split" },
	},
	n = { "<cmd>NvimTreeToggle<CR>", "Nvim-Tree Toggle" },
	c = { "<cmd>Sc<CR>", "Clear Text Highlight" },
	f = { "<cmd>lua vim.lsp.buf.format{ async = true }<CR>", "Format" },
	L = {
		name = "Lsp",
		r = { "<cmd>LspRestart<CR>", "Restart Lsp" },
		s = { "<cmd>LspStart<CR>", "Start Lsp" },
		p = { "<cmd>LspStop<CR>", "Stop Lsp" },
		l = { "<cmd>LspLog<CR>", "Lsp Log" },
		i = { "<cmd>LspInfo<CR>", "Lsp Info" },
	},
	z = { "<cmd>w | so %<CR>", "Reload Neovim" },
	a = { "<cmd>lua vim.lsp.buf.code_action()<CR>", "Code Action" },
	O = {
		name = "Open",
		i = { "<cmd>e " .. g.nvim_directory .. "/init.lua<CR>", "Open Init" },
		c = { "<cmd>e " .. g.nvim_directory .. "/colors_update.lua<CR>", "Open colors_update.lua" },
		k = { "<cmd>e " .. g.nvim_directory .. "/plugin_packer.lua<CR>", "Open plugin_packer.lua" },
		w = { "<cmd>e " .. g.nvim_directory .. "/plugin/which-key.lua<CR>", "Open Which-Key File" },
		s = { "<cmd>e " .. g.nvim_directory .. "/plugin/lspconfig.lua<CR>", "Open Lspconfig File" },
		p = { "<cmd>e " .. g.nvim_directory .. "/plugin<CR>", "Open Plugin Directory" },
		l = { "<cmd>e " .. g.nvim_directory .. "/Luasnip/<CR>", "Open Luasnip Directory" },
		a = { "<cmd>e /Users/iMac/.config/alacritty/alacritty.yml<CR>", "Open Alacritty Config File" },
		z = { "<cmd>e /Users/iMac/.zshrc<CR>", "Open Zsh Config File" },
	},
	T = {
		name = "Tasks",
		l = { "<cmd>!task long<CR>", "List" },
		a = { "<cmd>lua vim.cmd('!task add ' .. vim.fn.input('New Task: '))<CR>", "Add" },
		d = { "<cmd>lua vim.cmd('!task delete ' .. vim.fn.input('Delete Task Id: ') .. ' << echo '.. vim.fn.input('Confirm: '))<CR>",
			"Delete" },
		c = { "<cmd>lua vim.cmd('!task done ' .. vim.fn.input('Complete Task Id: '))<CR>", "Complete" },
		s = { "<cmd>lua vim.cmd('!task sync')<CR>", "Sync" },
	},
	s = { "<cmd>PackerSync<CR>", "Packer Sync" },
	v = { "<cmd>StartupTime<CR>", "VimStartup Time" },
	u = { "<cmd>UndotreeToggle<CR>", "Undotree Toggle" },
	B = {
		name = "Buffer",
		n = { "<cmd>bnext<CR>", "Next Buffer" },
		p = { "<cmd>bprevious<CR>", "Previous Buffer" },
		c = { "<cmd>bw!<CR>", "Close Buffer" },
		t = { "<cmd>lua vim.lsp.buf.type_definition()<CR>", "Defintion" },
		s = { "<cmd>lua vim.lsp.buf.signature_help()<CR>", "Signature Help" },
		d = { "<cmd>lua vim.lsp.buf.definition()<CR>", "Buffer Definition" },
		e = { "<cmd>lua vim.lsp.buf.declaration()<CR>", "Buffer Declaration" },
		h = { "<cmd>lua vim.lsp.buf.hover()<CR>", "Hover" },
		i = { "<cmd>lua vim.lsp.buf.implementation()<CR>", "Implementation" },
	},
	H = {
		name = "Harpoon",
		a = { "<cmd>lua require('harpoon.mark').add_file()<CR>", "Add File"},
		n = { "<cmd>lua require('harpoon.ui').nav_next()<CR>", "Next Mark"},
		p = { "<cmd>lua require('harpoon.ui').nav_prev()<CR>", "Previous Mark"},
		m = { "<cmd>lua require('harpoon.ui').toggle_quick_menu()<CR>", "Menu"},
		t = { "<cmd>Telescope harpoon marks<CR>", "Telescope Menu"},
		r = {"<cmd>lua require('harpoon.term').gotoTerminal(1)<CR>", "Terminal 1"},
		["1"] = {"<cmd>lua require('harpoon.ui').nav_file(1)<CR>", "File 1"},
		["2"] = {"<cmd>lua require('harpoon.ui').nav_file(2)<CR>", "File 2"},
		["3"] = {"<cmd>lua require('harpoon.ui').nav_file(3)<CR>", "File 3"},
		["4"] = {"<cmd>lua require('harpoon.ui').nav_file(4)<CR>", "File 4"},
		["5"] = {"<cmd>lua require('harpoon.ui').nav_file(5)<CR>", "File 5"},
		["6"] = {"<cmd>lua require('harpoon.ui').nav_file(6)<CR>", "File 6"},
		["7"] = {"<cmd>lua require('harpoon.ui').nav_file(7)<CR>", "File 7"},
		["8"] = {"<cmd>lua require('harpoon.ui').nav_file(8)<CR>", "File 8"},
		["9"] = {"<cmd>lua require('harpoon.ui').nav_file(9)<CR>", "File 9"},
		["0"] = {"<cmd>lua require('harpoon.ui').nav_file(0)<CR>", "File 0"},
	},
	E = {
		name = "Telescope",
		f = { "<cmd>Telescope find_files<CR>", "Find Files" },
		g = { "<cmd>Telescope live_grep<CR>", "Live Grep" },
		b = { "<cmd>Telescope buffers<CR>", "List Buffers" },
		h = { "<cmd>Telescope help_tags<CR>", "Help Tags" },
		c = { "<cmd>Telescope highlights<CR>", "Highlight Groups" },
	},
	A = {
		name = "Aerial",
		o = { "<cmd>AerialOpen left<CR>", "Open Aerial Left" },
		c = { "<cmd>AerialClose<CR>", "Close Aerial" },
	},
	d = {
		[[<cmd>lua xpcall(function() print(vim.lsp.diagnostic.get_line_diagnostics()[1]['data']['rendered']) end, function() xpcall( function() print(vim.lsp.diagnostic.get_line_diagnostics()[1]['message']) end, function() print('No Diagnostic Information Available') end) end)<CR>]],
		"Get Diagnostic Error",
	},
	w = { "<cmd>w<CR>", "Write" },
	W = { "<cmd>w!<CR>", "Force Write" },
	q = { "<cmd>q<CR>", "Quit" },
	Q = { "<cmd>q!<CR>", "Force Quit" },
}, { prefix = "<leader>" })
