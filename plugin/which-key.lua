local wk = require("which-key")
wk.setup({
	ignore_missing = true,
})

wk.register({
	h = { "<cmd>wincmd h<CR>", "Switch Pane Left" },
	j = { "<cmd>wincmd j<CR>", "Switch Pane Down" },
	k = { "<cmd>wincmd k<CR>", "Switch Pane Up" },
	l = { "<cmd>wincmd l<CR>", "Switch Pane Right" },
	H = { "<cmd>vert resize -5<CR>", "Decrease Pane Width" },
	J = { "<cmd>resize -5<CR>", "Decrease Pane Height" },
	K = { "<cmd>resize +5<CR>", "Increase Pane Height" },
	L = { "<cmd>vert resize +5<CR>", "Increase Pane Width" },
	N = { "<cmd>split<CR>", "Horizontal Split" },
	M = { "<cmd>vsplit<CR>", "Vertical Split" },
	n = { "<cmd>NvimTreeToggle<CR>", "Nvim-Tree Toggle" },
	o = {
		name = "Open",
		i = { "<cmd>e ~/.config/nvim/init.lua<CR>", "Open Init" },
		p = { "<cmd>e ~/.config/nvim/plugin_packer.lua<CR>", "Open Plugin File" },
		w = { "<cmd>e ~/.config/nvim/plugin/which-key.lua<CR>", "Open Which-Key File" },
		f = { "<cmd>e ~/.config/nvim/plugins<CR>", "Open Plugin Directory" },
	},
	p = {
		name = "Plugins",
		t = {
			name = "Test",
			n = { "<cmd>TestNearest<CR>", "Test Nearest" },
			f = { "<cmd>TestFile<CR>", "Test File" },
			s = { "<cmd>TestSuite<CR>", "Test Suite" },
			l = { "<cmd>TestLast<CR>", "Test Last" },
			v = { "<cmd>TestVisit<CR>", "Test Visit" },
		},
		l = { "<cmd>Luapad<CR>", "Initiate Luapad" },
		p = {
			name = "Packer",
			s = { "<cmd>PackerSync<CR>", "Packer Sync" },
		},
	},
	v = { "<cmd>StartupTime<CR>", "VimStartup Time" },
	T = {
		name = "Terminal",
		N = { "<cmd>split<CR><cmd>set nonumber<CR><cmd>term<CR>", "Create Horizontal Pane Terminal" },
		M = { "<cmd>vsplit<CR><cmd>set nonumber<CR><cmd>term<CR>", "Create Vertical Pane Terminal" },
	},
	b = {
		name = "Buffer",
		n = { "<cmd>bnext<CR>", "Next Buffer" },
		p = { "<cmd>bprevious<CR>", "Previous Buffer" },
		c = { "<cmd>bw!<CR>", "Close Buffer" },
		w = {
			name = "Workspace",
			a = { "<cmd>lua vim.lsp.buf.add_workspace_folder<CR>", "Add Workspace" },
			r = { "<cmd>lua vim.lsp.buf.remove_workspace_folder<CR>", "Remove Workspace" },
		},
		r = { "<cmd>lua vim.lsp.buf.rename<CR>", "Rename Buffer" },
		o = { "<cmd>lua vim.lsp.buf.code_action<CR>", "Code Action" },
		m = { "<cmd>lua vim.lsp.buf.format{ async = true }<CR>", "Format" },
		t = { "<cmd>lua vim.lsp.buf.type_definition<CR>", "Defintion" },
		s = { "<cmd>lua vim.lsp.buf.signature_help<CR>", "Signature Help" },
		d = { "<cmd>lua vim.lsp.buf.declaration<CR>", "Buffer Declaration" },
		e = { "<cmd>lua vim.lsp.buf.defintion<CR>", "Buffer Defintion" },
		h = { "<cmd>lua vim.lsp.buf.hover<CR>", "Hover" },
		i = { "<cmd>lua vim.lsp.buf.implementation<CR>", "Implementation" },
	},
	f = {
		name = "Files",
		s = { "<cmd>w<CR>", "Save File" },
		q = { "<cmd>q<CR>", "Quit File" },
		r = { "<cmd>Format<CR>", "Format File" },
		t = { "<cmd>FormatWrite<CR>", "Format and Save File" },
		z = { "<cmd>w | so %<CR>", "Reload Neovim" },
	},
	e = {
		name = "Telescope",
		f = { "<cmd>Telescope find_files<CR>", "Find Files" },
		g = { "<cmd>Telescope live_grep<CR>", "Live Grep" },
		b = { "<cmd>Telescope buffers<CR>", "List Buffers" },
		h = { "<cmd>Telescope help_tags<CR>", "Help Tags" },
	},
	d = {
		name = "Diagnostics",
		e = { "<cmd>lua vim.lsp.diagnostic.open_float<CR>", "Open Float" },
		n = { "<cmd>lua vim.diagnostic.goto_next<CR>", "Go To Next Diagnostic" },
		p = { "<cmd>lua vim.diagnostic.goto_prev<CR>", "Go To Previous Diagnostic" },
		s = { "<cmd>lua vim.diagnostic.setloclist<CR>", "Set Local List" },
	},
	m = {
		name = "Markdown",
		t = {
			name = "Table",
			c = { "<cmd>lua require('tablemd').insertColumn(false)<CR>", "Create Column" },
			d = { "<cmd>lua require('tablemd').deleteColumn()<CR>", "Delete Column" },
			f = { "<cmd>lua require('tablemd').format()<CR>", "Format Table" },
			r = { "<cmd>lua require('tablemd').insertRow(false)<CR>", "Add Row Above" },
			R = { "<cmd>lua require('tablemd').insertRow(true)<CR>", "Add Row Below" },
			a = {
				name = "Align",
				l = { "<cmd>lua require('tablemd').alignColumn('left')<CR>", "Left" },
				c = { "<cmd>lua require('tablemd').alignColumn('center')<CR>", "Center" },
				r = { "<cmd>lua require('tablemd').alignColumn('right')<CR>", "Right" },
			},
		},
		h = {
			name = "Header",
			i = { "<cmd>HeaderIncrease<CR>", "Increase Level" },
			d = { "<cmd>HeaderDecrease<CR>", "Decrease Level" },
		},
		s = { "<cmd>SetexToAtx<CR>", "Atx Header Style" },
		c = {
			name = "Table of Contents",
			c = { "<cmd>Toc<CR>", "Create Table" },
			h = { "<cmd>Toch<CR>", "Horizontal" },
			v = { "<cmd>Tocv<CR>", "Vertical" },
			i = { "<cmd>InsertToc<CR>", "Insert Table" },
			n = { "<cmd>InsertNToc<CR>", "Insert Numbered Table" },
		},
	},
	w = { "<cmd>w<CR>", "Write File" },
	q = { "<cmd>q<CR>", "Quit File" }
}, { prefix = "<leader>" })
