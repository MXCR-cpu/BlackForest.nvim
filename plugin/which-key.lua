local g = vim.g
local wk = require('which-key')
wk.setup {
	ignore_missing = true,
}

wk.register({
	Q = { '<cmd>q!<CR>'                                    ,'Force Quit'          },
	W = { '<cmd>w!<CR>'                                    ,'Force Write'         },
	a = { '<cmd>lua vim.lsp.buf.code_action()<CR>'         ,'Code Action'         },
	c = { '<cmd>ClearHighlight<CR>'                        ,'Clear Text Highlight'},
	d = { '<cmd>DMsg<CR>'                                  ,'Get Diagnostic Error'},
	i = { '<cmd>AerialToggle left<CR>'                     ,'Open Aerial'         },
	f = { '<cmd>lua vim.lsp.buf.format{ async = true }<CR>','Format'              },
	n = { '<cmd>NvimTreeToggle<CR>'                        ,'Nvim-Tree Toggle'    },
	q = { '<cmd>q<CR>'                                     ,'Quit'                },
	s = { '<cmd>PackerSync<CR>'                            ,'Packer Sync'         },
	u = { '<cmd>UndotreeToggle<CR>'                        ,'Undotree Toggle'     },
	v = { '<cmd>StartupTime<CR>'                           ,'VimStartup Time'     },
	w = { '<cmd>w<CR>'                                     ,'Write'               },
	z = { '<cmd>w | so %<CR>'                              ,'Reload Neovim'       },
	A = {
		name = 'Align',
		l = { '<cmd>lua require"utility".align("left" ,false)<CR>','Align Left'     },
		L = { '<cmd>lua require"utility".align("left" ,true)<CR>' ,'Align Gap Left' },
		r = { '<cmd>lua require"utility".align("right",false)<CR>','Align Right'    },
		R = { '<cmd>lua require"utility".align("right",true)<CR>' ,'Align Gap Right'},
	},
	B = {
		name = 'Buffer',
		n = { '<cmd>bnext<CR>'                            ,'Next Buffer'       },
		p = { '<cmd>bprevious<CR>'                        ,'Previous Buffer'   },
		c = { '<cmd>bw!<CR>'                              ,'Close Buffer'      },
		t = { '<cmd>lua vim.lsp.buf.type_definition()<CR>','Defintion'         },
		s = { '<cmd>lua vim.lsp.buf.signature_help()<CR>' ,'Signature Help'    },
		d = { '<cmd>lua vim.lsp.buf.definition()<CR>'     ,'Buffer Definition' },
		e = { '<cmd>lua vim.lsp.buf.declaration()<CR>'    ,'Buffer Declaration'},
		h = { '<cmd>lua vim.lsp.buf.hover()<CR>'          ,'Hover'             },
		i = { '<cmd>lua vim.lsp.buf.implementation()<CR>' ,'Implementation'    },
	},
	C = {
		name = 'Nvim-Cmp(Insert)',
		['<C-]>'] = { '','Select Next Item'    },
		['<C-[>'] = { '','Select Previous Item'},
		['<C-}>'] = { '','Scroll Docs Down'    },
		['<C-{>'] = { '','Scroll Docs Up'      },
		['<C-.>'] = { '','Select Item'         },
		['<C-!>'] = { '','Abort'               },
		['<C-;>'] = { '','Confirm Selection'   },
	},
	E = {
		name = 'Telescope',
		f = { '<cmd>Telescope find_files<CR>','Find Files'      },
		g = { '<cmd>Telescope live_grep<CR>' ,'Live Grep'       },
		b = { '<cmd>Telescope buffers<CR>'   ,'List Buffers'    },
		h = { '<cmd>Telescope help_tags<CR>' ,'Help Tags'       },
		c = { '<cmd>Telescope highlights<CR>','Highlight Groups'},
	},
	H = {
		name = 'Harpoon',
		a = { '<cmd>lua require"harpoon.mark".add_file()<CR>'                               ,'Add File'      },
		r = { '<cmd>lua require"harpoon.mark".rm_file()<CR>'                                ,'Add File'      },
		s = { '<cmd>lua require"harpoon.mark".set_current_at(0 + vim.fn.input"Index: ")<CR>','Set To Index'  },
		g = { '<cmd>lua require"harpoon.ui".nav_file(0 + vim.fn.input"Index: ")<CR>'        ,'GoTo Index'    },
		n = { '<cmd>lua require"harpoon.ui".nav_next()<CR>'                                 ,'Next Mark'     },
		p = { '<cmd>lua require"harpoon.ui".nav_prev()<CR>'                                 ,'Previous Mark' },
		m = { '<cmd>lua require"harpoon.ui".toggle_quick_menu()<CR>'                        ,'Menu'          },
		t = { '<cmd>Telescope harpoon marks<CR>'                                            ,'Telescope Menu'},
		l = { '<cmd>lua require"harpoon.term".gotoTerminal(1)<CR>'                          ,'Terminal 1'    },
	},
	L = {
		name = 'LSP',
		r = { '<cmd>LspRestart<CR>','Restart Lsp'},
		s = { '<cmd>LspStart<CR>'  ,'Start Lsp'  },
		p = { '<cmd>LspStop<CR>'   ,'Stop Lsp'   },
		l = { '<cmd>LspLog<CR>'    ,'Lsp Log'    },
		i = { '<cmd>LspInfo<CR>'   ,'Lsp Info'   },
	},
	N = {
		name = 'Luasnip',
		e = { '<cmd>lua require"luasnip.loaders".edit_snippet_files()<CR>','Edit Snippets'         },
		o = { '<cmd>e ' .. g.nvim_directory .. '/Luasnip/<CR>'            ,'Open Snippet Directory'},
	},
	O = {
		name = 'Open',
		o = { '<cmd>e ' .. g.nvim_directory .. '/init.lua<CR>'                       ,'Open Init'                 },
		p = { '<cmd>e ' .. g.nvim_directory .. '/plugin<CR>'                         ,'Open Plugin Directory'     },
		i = { '<cmd>e ' .. g.nvim_directory .. '/inits<CR>'                          ,'Open Inits Directory'      },
		k = { '<cmd>e ' .. g.nvim_directory .. '/inits/plugin_packer.lua<CR>'        ,'Open plugin_packer.lua'    },
		w = { '<cmd>e ' .. g.nvim_directory .. '/plugin/which-key.lua<CR>'           ,'Open Which-Key File'       },
		l = { '<cmd>e ' .. g.nvim_directory .. '/plugin/lspconfig.lua<CR>'           ,'Open Lspconfig File'       },
		a = { '<cmd>e ' .. os.getenv 'HOME' .. '/.config/alacritty/alacritty.yml<CR>','Open Alacritty Config File'},
		z = { '<cmd>e ' .. os.getenv 'HOME' .. '/.zshrc<CR>'                         ,'Open Zsh Config File'      },
	},
	P = {
		name = 'Panes',
		h = { '<cmd>wincmd h<CR>'      ,'Switch Pane Left'    },
		j = { '<cmd>wincmd j<CR>'      ,'Switch Pane Down'    },
		k = { '<cmd>wincmd k<CR>'      ,'Switch Pane Up'      },
		l = { '<cmd>wincmd l<CR>'      ,'Switch Pane Right'   },
		H = { '<cmd>vert resize -5<CR>','Decrease Pane Width' },
		J = { '<cmd>resize -5<CR>'     ,'Decrease Pane Height'},
		K = { '<cmd>resize +5<CR>'     ,'Increase Pane Height'},
		L = { '<cmd>vert resize +5<CR>','Increase Pane Width' },
		r = { '<cmd>wincmd =<CR>'      ,'Reload Window Pages' },
		n = { '<cmd>split<CR>'         ,'Horizontal Split'    },
		m = { '<cmd>vsplit<CR>'        ,'Vertical Split'      },
	},
	T = {
		name = 'Tasks',
		l = { '<cmd>!task long<CR>'                                                                                           ,'List'    },
		a = { '<cmd>lua vim.cmd("!task add " .. vim.fn.input"New Task: ")<CR>'                                                ,'Add'     },
		d = { '<cmd>lua vim.cmd("task delete" .. vim.fn.input"Delete Task Id: " .. " << echo ".. vim.fn.input"Confirm: ")<CR>','Delete'  },
		c = { '<cmd>lua vim.cmd("task done" .. vim.fn.input"Complete Task Id: ")<CR>'                                         ,'Complete'},
		s = { '<cmd>lua vim.cmd"!task sync"<CR>'                                                                              ,'Sync'    },
	},
}, { prefix = '<leader>' })
